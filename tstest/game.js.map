{
  "version": 3,
  "sources": ["src/scripts/generics/vector2.ts", "src/scripts/handlers/renderHandler.ts", "src/scripts/components/renderer.ts", "src/scripts/components/transform.ts", "src/scripts/components/collider.ts", "src/scripts/handlers/inputHandler.ts", "src/scripts/handlers/logHandler.ts", "src/scripts/components/playerMovement.ts", "src/scripts/handlers/objectHandler.ts", "src/scripts/generics/events.ts", "src/scripts/objects/gameObject.ts", "src/scripts/handlers/mouseHandler.ts", "src/scripts/components/followMouse.ts", "src/scripts/components/dragger.ts", "src/scripts/game.ts"],
  "sourcesContent": ["export class Vector2 {\r\n    x : number = 0.0;\r\n    y : number = 0.0;\r\n\r\n    constructor(x?, y?) {\r\n        if(x !== undefined) {\r\n            this.x = x;\r\n        }\r\n\r\n        if(y !== undefined) {\r\n            this.y = y;\r\n        }\r\n    }\r\n\r\n    public add(val) : Vector2{\r\n        if(val instanceof Vector2) {\r\n            return new Vector2(this.x + val.x, this.y + val.y);\r\n        } else {\r\n            return new Vector2(this.x + val, this.y + val);\r\n        }\r\n    }\r\n\r\n    public subtract(val) : Vector2{\r\n        if(val instanceof Vector2) {\r\n            return new Vector2(this.x - val.x, this.y - val.y);\r\n        } else {\r\n            return new Vector2(this.x - val, this.y - val);\r\n        }\r\n    }\r\n\r\n    public multiply(val) : Vector2{\r\n        if(val instanceof Vector2) {\r\n            return new Vector2(this.x * val.x, this.y * val.y);\r\n        } else {\r\n            return new Vector2(this.x * val, this.y * val);\r\n        }\r\n    }\r\n\r\n    public static addVectors(pos1 : Vector2, pos2 : Vector2) : Vector2 {\r\n        return new Vector2(pos1.x + pos2.x, pos1.y + pos2.y);\r\n    }\r\n\r\n    public static subtractVectors(pos1 : Vector2, pos2 : Vector2) : Vector2 {\r\n        return new Vector2(pos1.x - pos2.x, pos1.y - pos2.y);\r\n    }\r\n\r\n    public static multiplyVectors(pos1 : Vector2, pos2 : Vector2) : Vector2 {\r\n        return new Vector2(pos1.x * pos2.x, pos1.y * pos2.y);\r\n    }\r\n\r\n    public static distance(pos1 : Vector2, pos2: Vector2) : number {\r\n        return Vector2.len(Vector2.subtractVectors(pos1, pos2));\r\n    }\r\n\r\n    public static normalize(pos : Vector2) : Vector2 {\r\n        let length = Vector2.len(pos);\r\n        \r\n        return new Vector2(pos.x / length, pos.y / length);\r\n    }\r\n\r\n    public static len(pos : Vector2) : number {\r\n        return Math.sqrt(pos.x * pos.x + pos.y * pos.y);\r\n    }\r\n}", "import { Renderer } from \"../components/renderer\";\r\n\r\nexport class RenderHandler {\r\n    private renderers : Renderer[] = new Array<Renderer>();\r\n    \r\n    private offscreenCanvas : HTMLCanvasElement;\r\n    private offscreenContext : CanvasRenderingContext2D;\r\n\r\n    private displayCanvas : HTMLCanvasElement;\r\n    private displayContext : CanvasRenderingContext2D;\r\n\r\n    private static instance: RenderHandler;\r\n    \r\n    private constructor() {};\r\n\r\n    public start() : void {\r\n        this.displayCanvas = document.querySelector<HTMLCanvasElement>(\"#canvas\");\r\n        this.offscreenCanvas = document.createElement(\"canvas\");\r\n\r\n        this.offscreenCanvas.width = this.displayCanvas.width;\r\n        this.offscreenCanvas.height = this.displayCanvas.height;\r\n\r\n        this.displayContext = this.displayCanvas.getContext(\"2d\");\r\n        this.offscreenContext = this.offscreenCanvas.getContext(\"2d\");\r\n    }\r\n\r\n    public static getInstance() : RenderHandler {\r\n        if(!RenderHandler.instance) {\r\n            RenderHandler.instance = new RenderHandler();\r\n        }\r\n\r\n        return RenderHandler.instance;\r\n    }\r\n\r\n    public addRenderer(renderer : Renderer) {\r\n        if(this.renderers.indexOf(renderer) == -1) {\r\n            this.renderers.push(renderer);\r\n        }\r\n    }\r\n\r\n    public update(dt) {\r\n        this.clearScreen();\r\n\r\n        for(let i = this.renderers.length; i--;) {\r\n            let renderer : Renderer = this.renderers[i];\r\n            let rendererImage : HTMLImageElement = renderer.image;\r\n            let rendererImageWidth : number = rendererImage.width as number;\r\n            let rendererImageHeight : number = rendererImage.height as number;\r\n            let rendererPositionX : number = renderer.gameObject.transform.position.x;\r\n            let rendererPositionY : number = renderer.gameObject.transform.position.y;\r\n\r\n            this.offscreenContext.drawImage(rendererImage, rendererPositionX, rendererPositionY, rendererImageWidth, rendererImageHeight);    \r\n        }\r\n\r\n        this.displayContext.drawImage(this.offscreenCanvas, 0, 0, this.offscreenCanvas.width, this.offscreenCanvas.height);\r\n    }\r\n\r\n    private clearScreen() {\r\n        this.offscreenContext.fillRect(0, 0, this.displayCanvas.width, this.displayCanvas.height);\r\n    }\r\n}", "import { RenderHandler } from \"../handlers/renderHandler\";\r\nimport { GameObject } from \"../objects/gameObject\";\r\nimport { IComponent } from \"./component\";\r\n\r\nexport class Renderer implements IComponent {\r\n    gameObject: GameObject;\r\n    image : HTMLImageElement;\r\n\r\n    constructor(image? : HTMLImageElement) {\r\n        if(image !== undefined) {\r\n            this.image = image;\r\n        }\r\n\r\n        RenderHandler.getInstance().addRenderer(this);\r\n    }\r\n\r\n    start(): void {\r\n        return;\r\n    }\r\n\r\n    update(dt: number): void {\r\n        return;\r\n    }\r\n}", "import { IComponent } from \"./component\";\r\nimport { Vector2 } from \"../generics/vector2\";\r\nimport { GameObject } from \"../objects/gameObject\";\r\nimport { Renderer } from \"./renderer\";\r\n\r\nexport class Transform implements IComponent {\r\n    public position: Vector2 = new Vector2();\r\n\r\n    public width: number;\r\n    public height: number;\r\n\r\n    private startPosition: Vector2;\r\n    private endPosition: Vector2;\r\n    private isMoving: boolean = false;\r\n    private distance: number;\r\n    private direction: Vector2;\r\n    private speed: number;\r\n\r\n    gameObject: GameObject;\r\n\r\n    public constructor(x?: number, y?: number, width?: number, height?: number, vec2?: Vector2) {\r\n        if (x !== undefined) {\r\n            this.position.x = x;\r\n        }\r\n\r\n        if (y !== undefined) {\r\n            this.position.y = y;\r\n        }\r\n\r\n        if (width !== undefined) {\r\n            this.width = width;\r\n        }\r\n\r\n        if (height !== undefined) {\r\n            this.height = height;\r\n        }\r\n\r\n        if (vec2 !== undefined) {\r\n            this.position = vec2;\r\n        }\r\n    }\r\n\r\n    start(): void {\r\n        return;\r\n    }\r\n\r\n    update(dt: number): void {\r\n        if (this.isMoving) {\r\n            this.position = Vector2.addVectors(this.position, this.direction.multiply(this.speed * dt));\r\n\r\n            if (Vector2.distance(this.startPosition, this.position) >= this.distance) {\r\n                this.position = this.endPosition;\r\n                this.isMoving = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves object to specific given Vector2 using speed * deltaTime. Don't give it a negative speed or it will go in the other direction.\r\n     * @param pos \r\n     * @param speed \r\n     */\r\n    moveTo(pos: Vector2, speed: number): void {\r\n        this.startPosition = this.position;\r\n        this.endPosition = pos;\r\n        this.distance = Vector2.distance(this.startPosition, pos);\r\n        this.speed = speed / 1000;\r\n        this.direction = Vector2.normalize(Vector2.subtractVectors(pos, this.startPosition));\r\n        this.isMoving = true;\r\n    }\r\n\r\n    getCenter(): Vector2 {\r\n        const renderer = this.gameObject.getComponent(Renderer);\r\n\r\n        if (!renderer) {\r\n            return;\r\n        }\r\n\r\n        const imageWidth = renderer.image.width;\r\n        const imageHeight = renderer.image.height;\r\n\r\n        return new Vector2(this.position.x + imageWidth / 2, this.position.y + imageHeight / 2);\r\n    }\r\n}", "import { GameObject } from \"../objects/gameObject\";\r\nimport { IComponent } from \"./component\";\r\nimport { Transform } from \"./transform\";\r\n\r\nexport class Collider implements IComponent {\r\n    gameObject: GameObject;\r\n    transform : Transform;\r\n\r\n    start(): void {\r\n        this.transform = this.gameObject.getComponent(Transform);\r\n    }\r\n\r\n    update(dt: number): void {\r\n        // Not needed\r\n    }\r\n}", "export class InputHandler {\r\n    private static instance: InputHandler;\r\n\r\n    private static pressedKeys : Array<string> = new Array<string>();\r\n\r\n    private constructor() {};\r\n\r\n    public static getInstance() : InputHandler {\r\n        if(!InputHandler.instance) {\r\n            InputHandler.instance = new InputHandler();\r\n        };\r\n\r\n        return InputHandler.instance;\r\n    };\r\n\r\n    public start() : void {\r\n        document.addEventListener('keydown', (e) => {\r\n            if(e.defaultPrevented) {\r\n                return;\r\n            };\r\n\r\n            if(InputHandler.pressedKeys.indexOf(e.code) == -1) {\r\n                InputHandler.pressedKeys.push(e.code);\r\n            };\r\n        });\r\n\r\n        document.addEventListener('keyup', (e) => {\r\n            if(e.defaultPrevented) {\r\n                return;\r\n            };\r\n\r\n            let keyIndex : number = InputHandler.pressedKeys.indexOf(e.code);\r\n\r\n            if(keyIndex != -1) {\r\n                InputHandler.pressedKeys.splice(keyIndex, 1);\r\n            };\r\n        });\r\n    };\r\n\r\n    public static keyDown(keyCode : string) : boolean {\r\n        if(this.pressedKeys.indexOf(keyCode) != -1) {\r\n            return true;\r\n        };\r\n\r\n        return false;\r\n    };\r\n}", "export class LogHandler {\r\n    private static instance: LogHandler;\r\n\r\n    private logs: string[] = [];\r\n\r\n    private constructor() {\r\n        this.logs = [];\r\n        window.setInterval(this.printLogs, 1000);\r\n    };\r\n\r\n    public static getInstance(): LogHandler {\r\n        if (!LogHandler.instance) {\r\n            LogHandler.instance = new LogHandler();\r\n        };\r\n\r\n        return LogHandler.instance;\r\n    };\r\n\r\n    public addLog(log: string): void {\r\n        this.logs.push(log);\r\n    }\r\n\r\n    public printLogs(): void {\r\n        if (!this.logs || this.logs.length == 0) {\r\n            return;\r\n        }\r\n\r\n        console.group(this.logs);\r\n        console.groupEnd();\r\n        this.logs = [];\r\n    }\r\n}", "import { InputHandler } from \"../handlers/inputHandler\";\r\nimport { LogHandler } from \"../handlers/logHandler\";\r\nimport { GameObject } from \"../objects/gameObject\";\r\nimport { IComponent } from \"./component\";\r\n\r\nexport class PlayerMovement implements IComponent {\r\n    public speed: number = 1;\r\n\r\n    gameObject: GameObject;\r\n    canMove: boolean = true;\r\n\r\n    start(): void {\r\n        this.gameObject.onCollision.on((other) => {\r\n            LogHandler.getInstance().addLog(`Collision with object: ${other.name}`);\r\n        });\r\n\r\n        return;\r\n    }\r\n\r\n    update(dt: number): void {\r\n        if (!this.canMove) {\r\n            return;\r\n        }\r\n\r\n        if (InputHandler.keyDown(\"KeyA\") || InputHandler.keyDown(\"ArrowLeft\")) {\r\n            this.gameObject.transform.position.x -= this.speed * dt;\r\n        }\r\n\r\n        if (InputHandler.keyDown(\"KeyD\") || InputHandler.keyDown(\"ArrowRight\")) {\r\n            this.gameObject.transform.position.x += this.speed * dt;\r\n        }\r\n\r\n        if (InputHandler.keyDown(\"KeyW\") || InputHandler.keyDown(\"ArrowUp\")) {\r\n            this.gameObject.transform.position.y -= this.speed * dt;\r\n        }\r\n\r\n        if (InputHandler.keyDown(\"KeyS\") || InputHandler.keyDown(\"ArrowDown\")) {\r\n            this.gameObject.transform.position.y += this.speed * dt;\r\n        }\r\n    }\r\n}", "import { Collider } from \"../components/collider\";\r\nimport { GameObject } from \"../objects/gameObject\";\r\n\r\nexport class ObjectHandler {\r\n    private static instance: ObjectHandler;\r\n    private constructor() { }\r\n\r\n    private gameObjects: GameObject[] = new Array<GameObject>();\r\n\r\n    public start(): void {\r\n        return;\r\n    }\r\n\r\n    public static getInstance(): ObjectHandler {\r\n        if (!ObjectHandler.instance) {\r\n            ObjectHandler.instance = new ObjectHandler();\r\n        }\r\n\r\n        return ObjectHandler.instance;\r\n    }\r\n\r\n    public addGameObject(gameObject: GameObject) {\r\n        if (this.gameObjects.indexOf(gameObject) == -1) {\r\n            this.gameObjects.push(gameObject);\r\n        }\r\n    }\r\n\r\n    public getGameObjectsWithComponent<Type>(componentType: { new(): Type }): GameObject[] {\r\n        let toReturnGameObjects: GameObject[] = [];\r\n\r\n        for (let i = this.gameObjects.length; i--;) {\r\n            if (this.gameObjects[i].hasComponent(Collider)) {\r\n                toReturnGameObjects.push(this.gameObjects[i]);\r\n            }\r\n        }\r\n\r\n        return toReturnGameObjects;\r\n    }\r\n\r\n    public update(dt) {\r\n        for (let i = this.gameObjects.length; i--;) {\r\n            this.gameObjects[i].update(dt);\r\n            this.checkCollisions();\r\n        }\r\n    }\r\n\r\n    public checkCollisions() {\r\n        let colliderObjects: GameObject[] = this.getGameObjectsWithComponent(Collider);\r\n\r\n        for (let y = colliderObjects.length; y--;) {\r\n            for (let x = colliderObjects.length - 1; x--;) {\r\n                let go1 = colliderObjects[y];\r\n                let go2 = colliderObjects[x];\r\n\r\n                if(this.aabbTest(go1, go2)) {\r\n                    go1.onCollision.emit(go2);\r\n                    go2.onCollision.emit(go1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public aabbTest(go1: GameObject, go2: GameObject) {\r\n        if (go1.transform.position.x < go2.transform.position.x + go2.transform.width &&\r\n            go1.transform.position.x + go1.transform.width > go2.transform.position.x &&\r\n            go1.transform.position.y < go2.transform.position.y + go2.transform.height &&\r\n            go1.transform.position.y + go1.transform.height > go2.transform.position.y) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}", "export interface Listener<T> {\r\n    (event: T): any;\r\n}\r\n\r\nexport interface Disposable {\r\n    dispose();\r\n}\r\n\r\n/** passes through events as they happen. You will not get events from before you start listening */\r\nexport class TypedEvent<T> {\r\n    private listeners: Listener<T>[] = [];\r\n    private listenersOncer: Listener<T>[] = [];\r\n\r\n    on = (listener: Listener<T>): Disposable => {\r\n        this.listeners.push(listener);\r\n        return {\r\n            dispose: () => this.off(listener)\r\n        };\r\n    }\r\n\r\n    once = (listener: Listener<T>): void => {\r\n        this.listenersOncer.push(listener);\r\n    }\r\n\r\n    off = (listener: Listener<T>) => {\r\n        var callbackIndex = this.listeners.indexOf(listener);\r\n        if (callbackIndex > -1) this.listeners.splice(callbackIndex, 1);\r\n    }\r\n\r\n    emit = (event: T) => {\r\n        /** Update any general listeners */\r\n        this.listeners.forEach((listener) => listener(event));\r\n\r\n        /** Clear the `once` queue */\r\n        if (this.listenersOncer.length > 0) {\r\n            const toCall = this.listenersOncer;\r\n            this.listenersOncer = [];\r\n            toCall.forEach((listener) => listener(event));\r\n        }\r\n    }\r\n\r\n    pipe = (te: TypedEvent<T>): Disposable => {\r\n        return this.on((e) => te.emit(e));\r\n    }\r\n}", "import { IComponent } from \"../components/component\";\r\nimport { Transform } from \"../components/transform\";\r\nimport { TypedEvent } from \"../generics/events\";\r\nimport { ObjectHandler } from \"../handlers/objectHandler\";\r\n\r\nexport class GameObject {\r\n    public components: IComponent[] = new Array<IComponent>();\r\n    public transform: Transform;\r\n    public name: string;\r\n    public onCollision: TypedEvent<GameObject> = new TypedEvent<GameObject>();\r\n\r\n    constructor(name?: string) {\r\n        ObjectHandler.getInstance().addGameObject(this);\r\n\r\n        this.transform = this.addComponent(new Transform());\r\n        this.name = name || \"New GameObject\";\r\n\r\n        this.start();\r\n    }\r\n\r\n    public start(): void {\r\n        console.log(`Started ${this.name}`);\r\n    }\r\n\r\n    public update(dt: number): void {\r\n        for (let i = this.components.length; i--;) {\r\n            this.components[i].update(dt);\r\n        }\r\n    }\r\n\r\n    public addComponent<Type>(component: Type): Type {\r\n        let newComponent: IComponent = component as unknown as IComponent;\r\n\r\n        newComponent.gameObject = this;\r\n\r\n        if (this.components.indexOf(newComponent) == -1) {\r\n            this.components.push(newComponent);\r\n            newComponent.start();\r\n            return component;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public getComponent<Type>(componentType: { new(): Type }): Type {\r\n        for (let i = this.components.length; i--;) {\r\n            let component = this.components[i];\r\n\r\n            if (component instanceof componentType) {\r\n                return component;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public removeComponent(component: IComponent) {\r\n        let index: number = -1;\r\n\r\n        for (let i = this.components.length; i--;) {\r\n            let otherComponent = this.components[i];\r\n\r\n            if (otherComponent == component) {\r\n                index = i;\r\n            }\r\n        }\r\n\r\n        if (index != -1) {\r\n            this.components.splice(index, 1);\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    public hasComponent<Type>(componentType: { new(): Type }): boolean {\r\n        for (let i = this.components.length; i--;) {\r\n            let component = this.components[i];\r\n\r\n            if (component instanceof componentType) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}", "import { Vector2 } from \"../generics/vector2\";\r\nimport { LogHandler } from \"./logHandler\";\r\n\r\nexport class MouseHandler {\r\n    private static mouseX: number;\r\n    private static mouseY: number;\r\n\r\n    public static mouseDown: boolean;\r\n\r\n    private static instance: MouseHandler;\r\n\r\n    public static getInstance(): MouseHandler {\r\n        if (!MouseHandler.instance) {\r\n            MouseHandler.instance = new MouseHandler();\r\n        };\r\n\r\n        return MouseHandler.instance;\r\n    };\r\n\r\n    constructor() {\r\n        window.addEventListener('mousemove', (event: MouseEvent) => {\r\n            MouseHandler.mouseX = event.x;\r\n            MouseHandler.mouseY = event.y;\r\n        });\r\n\r\n        window.addEventListener('mousedown', () => {\r\n            MouseHandler.mouseDown = true;\r\n        });\r\n\r\n        window.addEventListener('mouseup', () => {\r\n            MouseHandler.mouseDown = false;\r\n        });\r\n    }\r\n\r\n    public static getPosition(): Vector2 {\r\n        return new Vector2(MouseHandler.mouseX, MouseHandler.mouseY);\r\n    }\r\n\r\n    public static isOverObject(position: Vector2, radius: number): boolean {\r\n        const mousePos = MouseHandler.getPosition();\r\n\r\n        return Math.pow(mousePos.x - position.x, 2) + Math.pow(mousePos.y - position.y, 2) < Math.pow(radius, 2);\r\n    }\r\n}", "import { Vector2 } from \"../generics/vector2\";\r\nimport { MouseHandler } from \"../handlers/mouseHandler\";\r\nimport { GameObject } from \"../objects/gameObject\";\r\nimport { IComponent } from \"./component\";\r\nimport { Renderer } from \"./renderer\";\r\n\r\nexport class FollowMouse implements IComponent {\r\n    gameObject: GameObject;\r\n\r\n    public shouldFollow: boolean;\r\n\r\n    private renderer: Renderer;\r\n    private image: HTMLImageElement;\r\n\r\n    start(): void {\r\n        this.renderer = this.gameObject.getComponent(Renderer);\r\n        \r\n        if(this.renderer) {\r\n            this.image = this.renderer.image;\r\n        }\r\n    }\r\n\r\n    update(dt: number): void {\r\n        if (!this.shouldFollow) {\r\n            return;\r\n        }\r\n\r\n        const mousePos = MouseHandler.getPosition();\r\n\r\n        if(!this.image) {\r\n            this.gameObject.transform.position = mousePos;\r\n        } else {\r\n            this.gameObject.transform.position = new Vector2(mousePos.x - this.image.width / 2, mousePos.y - this.image.height / 2);\r\n        }\r\n    }\r\n}", "import { MouseHandler } from \"../handlers/mouseHandler\";\r\nimport { GameObject } from \"../objects/gameObject\";\r\nimport { IComponent } from \"./component\";\r\nimport { FollowMouse } from \"./followMouse\";\r\n\r\nexport class Dragger implements IComponent {\r\n    gameObject: GameObject;\r\n\r\n    private followMouse: FollowMouse;\r\n\r\n    start(): void {\r\n        this.followMouse = this.gameObject.getComponent(FollowMouse);\r\n        this.followMouse.shouldFollow = false;\r\n    }\r\n\r\n    update(dt: number): void {\r\n        if(!MouseHandler.mouseDown) {\r\n            this.followMouse.shouldFollow = false;\r\n            return;\r\n        }\r\n\r\n        if(MouseHandler.isOverObject(this.gameObject.transform.getCenter(), 50)) {\r\n            this.followMouse.shouldFollow = true;\r\n        }\r\n    }\r\n}", "import { Collider } from \"./components/collider\";\r\nimport { PlayerMovement } from \"./components/playerMovement\";\r\nimport { Renderer } from \"./components/renderer\";\r\nimport { Vector2 } from \"./generics/vector2\";\r\nimport { InputHandler } from \"./handlers/inputHandler\";\r\nimport { ObjectHandler } from \"./handlers/objectHandler\";\r\nimport { RenderHandler } from \"./handlers/renderHandler\";\r\nimport { LogHandler } from \"./handlers/logHandler\";\r\nimport { GameObject } from \"./objects/gameObject\";\r\nimport { MouseHandler } from \"./handlers/mouseHandler\";\r\nimport { FollowMouse } from \"./components/followMouse\";\r\nimport { Dragger } from \"./components/dragger\";\r\n\r\nconst objectHandler = ObjectHandler.getInstance();\r\nconst renderHandler = RenderHandler.getInstance();\r\nconst inputHandler = InputHandler.getInstance();\r\nconst logHandler = LogHandler.getInstance();\r\nconst mouseHandler = new MouseHandler();\r\n\r\nconst dt : number = 0.01;\r\n\r\nlet currentTime : number = performance.now();\r\nlet accumulator : number = 0.0;\r\n\r\nfunction init() {\r\n    objectHandler.start();\r\n    renderHandler.start();\r\n    inputHandler.start();\r\n    \r\n    let player = new GameObject(\"Player\");\r\n    let renderer = player.addComponent(new Renderer());\r\n    let playerImage = new Image();\r\n\r\n    playerImage.src = \"src/assets/player.png\";\r\n    renderer.image = playerImage;\r\n    player.transform.height = 64;\r\n    player.transform.width = 64;\r\n\r\n    player.addComponent(new Collider());\r\n    player.addComponent(new PlayerMovement());\r\n    player.addComponent(new FollowMouse());\r\n    player.addComponent(new Dragger());\r\n\r\n    let wall = new GameObject(\"Wall\");\r\n    let wallRenderer = wall.addComponent(new Renderer());\r\n    let wallImage = new Image();\r\n\r\n    wallImage.src = \"src/assets/wall.png\";\r\n    wallRenderer.image = wallImage;\r\n\r\n    wall.transform.height = 64;\r\n    wall.transform.width = 64;\r\n\r\n    wall.transform.position = new Vector2(500, 500);\r\n\r\n    wall.addComponent(new Collider());\r\n\r\n    window.requestAnimationFrame(update);\r\n}\r\n\r\nfunction update() {\r\n    let newTime : number = performance.now();\r\n    let frameTime : number = newTime - currentTime;\r\n\r\n    currentTime = newTime;\r\n    accumulator += frameTime;\r\n\r\n    while(accumulator >= dt) {\r\n        objectHandler.update(dt);\r\n        accumulator -= dt;\r\n    }\r\n\r\n    renderHandler.update(dt);\r\n    logHandler.printLogs();\r\n\r\n    window.requestAnimationFrame(update);\r\n}\r\n\r\nwindow.onload = () => init();"],
  "mappings": "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",
  "names": []
}
