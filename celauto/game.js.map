{
  "version": 3,
  "sources": ["scripts/handlers/inputHandler.ts", "scripts/objects/pixel.ts", "scripts/handlers/screenHandler.ts", "scripts/handlers/pixelHandler.ts", "scripts/game.ts"],
  "sourcesContent": ["export class InputHandler {\r\n    private static instance: InputHandler;\r\n    private constructor() {}\r\n\r\n    public static getInstance() : InputHandler {\r\n        if(!InputHandler.instance) {\r\n            InputHandler.instance = new InputHandler();\r\n        }\r\n\r\n        return InputHandler.instance;\r\n    }\r\n\r\n    public start() : void {\r\n        return;\r\n    }\r\n\r\n    public update() : void {\r\n        return;\r\n    }\r\n}", "export class Pixel {\r\n    public x : number;\r\n    public y : number;\r\n    public w : number = 1;\r\n    public state : number = 0;\r\n    \r\n    public constructor(x?, y?, w?) {\r\n        if(x !== undefined) {\r\n            this.x = x;\r\n        };\r\n\r\n        if(y !== undefined) {\r\n            this.y = y;\r\n        };\r\n\r\n        if(w !== undefined) {\r\n            this.w = w;\r\n        }\r\n    };\r\n};", "import * as GameConfig from \"../../config/gameConfig.json\";\r\nimport { Pixel } from \"../objects/pixel\";\r\n\r\nexport class ScreenHandler {\r\n    private offscreenCanvas : HTMLCanvasElement;\r\n    private offscreenContext : CanvasRenderingContext2D;\r\n    \r\n    private displayCanvas : HTMLCanvasElement;\r\n    private displayContext : CanvasRenderingContext2D;\r\n    \r\n    private toDrawPixels : Pixel[];\r\n\r\n    private static instance: ScreenHandler;\r\n    private constructor() {}\r\n\r\n    public static getInstance() : ScreenHandler {\r\n        if(!ScreenHandler.instance) {\r\n            ScreenHandler.instance = new ScreenHandler();\r\n        }\r\n\r\n        return ScreenHandler.instance;\r\n    }\r\n\r\n    public start() : void {\r\n        this.displayCanvas = document.querySelector<HTMLCanvasElement>(\"#canvas\");\r\n        this.offscreenCanvas = document.createElement(\"canvas\");\r\n\r\n        this.displayCanvas.height = GameConfig.canvasHeight;\r\n        this.displayCanvas.width = GameConfig.canvasWidth;\r\n\r\n        this.offscreenCanvas.height = GameConfig.canvasHeight;\r\n        this.offscreenCanvas.width = GameConfig.canvasWidth;\r\n\r\n        this.displayContext = this.displayCanvas.getContext(\"2d\");\r\n        this.offscreenContext = this.offscreenCanvas.getContext(\"2d\");\r\n\r\n        this.toDrawPixels = [];\r\n    }\r\n\r\n    public addPixel(pixel : Pixel) {\r\n        if(this.toDrawPixels.includes(pixel)) {\r\n            return;\r\n        }\r\n\r\n        this.toDrawPixels.push(pixel);\r\n    }\r\n\r\n    public update() {\r\n        this.clearScreen();\r\n        this.drawPixels();\r\n\r\n        this.displayContext.drawImage(this.offscreenCanvas, 0, 0, this.offscreenCanvas.width, this.offscreenCanvas.height);\r\n    }\r\n\r\n    private clearScreen() {\r\n        this.offscreenContext.fillStyle = \"black\";\r\n        this.offscreenContext.fillRect(0, 0, this.displayCanvas.width, this.displayCanvas.height);\r\n    }\r\n\r\n    private drawPixels() {\r\n        for(let i = 0; i < this.toDrawPixels.length; i++) {\r\n            let pixel = this.toDrawPixels[i];\r\n            this.offscreenContext.fillStyle = \"red\";\r\n            this.offscreenContext.fillRect(pixel.x, pixel.y, 5, 5);\r\n        }\r\n\r\n        this.toDrawPixels = [];\r\n    }\r\n}", "import * as GameConfig from \"../../config/gameConfig.json\";\r\nimport { Pixel } from \"../objects/pixel\";\r\nimport { ScreenHandler } from \"./screenHandler\";\r\n\r\nexport class PixelHandler {\r\n    private arrayWidth : number = 0;\r\n    private arrayHeight : number = 0;\r\n    private pixelArray : Pixel[][] = [];\r\n    \r\n    private static instance: PixelHandler;\r\n    private constructor() {};\r\n\r\n    public static getInstance() : PixelHandler {\r\n        if(!PixelHandler.instance) {\r\n            PixelHandler.instance = new PixelHandler();\r\n        };\r\n\r\n        return PixelHandler.instance;\r\n    };\r\n\r\n    public start() : void {\r\n        this.arrayWidth = GameConfig.canvasWidth;\r\n        this.arrayHeight = GameConfig.canvasHeight;\r\n\r\n        for(let x = this.arrayWidth; x--;) {\r\n            this.pixelArray[x] = [];\r\n            for(let y = this.arrayHeight; y--;) {\r\n                this.pixelArray[x][y] = new Pixel(x, y);\r\n            };\r\n        };\r\n\r\n        let pixel : Pixel = new Pixel(250, 0, 1);\r\n        pixel.state = 1;\r\n\r\n        this.pixelArray[250][0] = pixel;\r\n    };\r\n\r\n    public update() : void {\r\n        for(let x = 0; x < this.arrayWidth; ++x) {\r\n            for(let y = 0; y < this.arrayHeight; ++y) {\r\n                if(this.pixelArray[x][y].state == 0) {\r\n                    continue;\r\n                };\r\n\r\n                let bottomY : number = y + 1;\r\n                let bottomRightX : number = (x + this.arrayWidth + 1) % this.arrayWidth;\r\n                let bottomLeftX : number = (x + this.arrayWidth - 1) % this.arrayWidth;\r\n\r\n                if(bottomLeftX <= 0 || bottomRightX >= this.arrayWidth || bottomY >= this.arrayHeight) {\r\n                    continue;\r\n                }\r\n\r\n                if(this.pixelArray[x][bottomY].state == 0) {\r\n                    this.pixelArray[x][y].y += 1;\r\n                    \r\n                    this.updatePixel(x, y, x, y + 1);\r\n\r\n                    continue;\r\n                };\r\n                \r\n                if(this.pixelArray[bottomRightX][bottomY].state == 0) {\r\n                    this.pixelArray[x][y].x += 1;\r\n                    this.pixelArray[x][y].y += 1;\r\n                    \r\n                    this.updatePixel(x, y, x + 1, y + 1);\r\n\r\n                    continue;\r\n                };\r\n\r\n                if(this.pixelArray[bottomLeftX][bottomY].state == 0) {\r\n                    this.pixelArray[x][y].x -= 1;\r\n                    this.pixelArray[x][y].y += 1;\r\n                    \r\n                    this.updatePixel(x, y, x - 1, y + 1);\r\n\r\n                    continue;\r\n                };\r\n            };\r\n        };\r\n    };\r\n\r\n    private updatePixel(oldX : number, oldY : number, newX : number, newY : number) : void {\r\n        this.pixelArray[newX][newY] = this.pixelArray[oldX][oldY];\r\n        this.pixelArray[oldX][oldY] = new Pixel(oldX, oldY, 1);\r\n\r\n        ScreenHandler.getInstance().addPixel(this.pixelArray[newX][newY]);\r\n    }\r\n};", "import { InputHandler, PixelHandler, ScreenHandler } from \"./handlers/handlers\";\r\n\r\nconst inputHandler = InputHandler.getInstance();\r\nconst pixelHandler = PixelHandler.getInstance();\r\nconst screenHandler = ScreenHandler.getInstance();\r\n\r\nfunction init() {\r\n    pixelHandler.start();\r\n    screenHandler.start();\r\n    inputHandler.start();\r\n    \r\n    window.requestAnimationFrame(update);\r\n}\r\n\r\nfunction update() {\r\n    pixelHandler.update();\r\n    screenHandler.update();\r\n    inputHandler.update();\r\n\r\n    window.requestAnimationFrame(update);\r\n}\r\n\r\nwindow.onload = () => init();"],
  "mappings": "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",
  "names": []
}
